@page "/"

@inject PhrasesBlazor.Services.PhrasesRepo _repo
@using PhrasesBlazor.Data;

<PageTitle>Index</PageTitle>
<h1 class="h1Black">
	<i class="bi bi-chevron-double-left" style="color: darkgoldenrod"></i> Phrases <i class="bi bi-chevron-double-right" style="color: darkgoldenrod"></i>
</h1>

@if (!String.IsNullOrEmpty(EditorMessage))
{
	<p>@EditorMessage</p>
}

@* Filter-inputs för vilken page/app som ska visas *@
@if (!IsEditing && !IsCreating)
{
	<div class="row pt-4 pb-0 mb-0">
		@* Labels *@
		<div class="row">
			<label style="color: darkgoldenrod" class="col-4">Applikation</label>

			@if (Model.Application != 0)
			{
				<label style="color: darkgoldenrod" class="col-4">Sida</label>
			}
		</div>

		<div class="row">
			@* App Selection *@
			<div class="col-4 ">
				<select id="InputBorderBotton90" class="form-select" value=@Model.Application @onchange=OnSelectedAppChanged>
					<option selected value="">Välj en applikation..</option>
					@foreach (var app in Applications)
					{
						<option value="@app.ApplicationID">@app.ApplicationName</option>
					}
				</select>
			</div>

			@* Page Selection *@
			@if (Model.Application != 0)
			{
				<div class="col-4">
					<select id="InputBorderBotton90" class="form-select" value=@Model.Page @onchange=OnSelectedPageChanged>
						<option selected value="">Välj en sida..</option>
						@foreach (var p in Pages)
						{
							<option value="@p.ID">@p.PageName</option>
						}
					</select>
				</div>
			}

			@* Preview button *@
			@if (Model.Application != 0 && Model.Page != 0)
			{
				<div class="col-2 mb-0 pb-0">
					<button id="Knapp" class="btn btn-outline-success btn-lg mb-0 pb-0" @onclick=FindMissingTranslations>Granska</button>
				</div>
			}
		</div>

		@if (Model.Application != 0 && Model.Page != 0)
		{
			@*		<div class="col-4">
	<label class="labelApplicationHome">Språk</label>
	<select class="form-select formSelectApplicationHome" value=@Model.Culture @onchange=OnSelectedCultureChanged>
	<option selected value="">Välj ett språk..</option>
	@foreach(var c in Cultures)
	{
	<option value="@c.Culture">@c.Culture</option>
	}
	</select>
	</div>*@
		}
	</div>
}

@* Denna borde egentligen wrappa hela sidan, generisk för allt som händer *@
@if (IsLoading)
{
	<div>
		<p>Kontrollerar översättningar..</p>
		<div class="spinny-loader"></div>
	</div>
}

@* Editor för att redigera Phrase *@
@if (IsEditing)
{
	<div>
		<h2 class="h2">Redigera fras</h2>

		@* Labels *@
		<div class="row">
			<label class="col-4">Applikation</label>

			@if (Edit.ApplicationID != 0)
			{
				<label class="col-4">Sida</label>
			}
		</div>

		@* Application, Page, Culture *@
		<div class="row">
			@* App Selection *@
			<div class="col-4">
				<select class="form-select" disabled=@(Edit.PhraseID !=0 ? "true" : "false" ) value=@Edit.ApplicationID @onchange=OnEditApplicationChanged>
					<option selected value="">Välj en applikation..</option>
					@foreach (var app in Applications)
					{
						<option value="@app.ApplicationID">@app.ApplicationName</option>
					}
				</select>
			</div>

			@* Page Selection *@
			@if (Edit.ApplicationID != 0)
			{
				<div class="col-4">
					<select class="form-select" disabled=@(Edit.PhraseID !=0 ? "true" : "false" ) value=@Edit.PageID @onchange=OnEditPageChanged>
						<option selected value="">Välj en sida..</option>
						@foreach (var p in Pages)
						{
							<option value="@p.ID">@p.PageName</option>
						}
					</select>
				</div>
			}

			@* Culture Selection *@
			@if (Edit.PageID != 0)
			{
				<div class="col-4">
					<select class="form-select" disabled=@(!String.IsNullOrEmpty(Edit.Culture) ? "true" : "false" ) value=@Edit.Culture @onchange=OnEditPageChanged>
						<option value="">Välj en kultur..</option>
						@foreach (var c in Cultures)
						{
							<option value="@c.CultureID">@c.Culture</option>
						}
					</select>
				</div>
			}

		</div>

		@* Phrase-ID/Element/Phrase *@
		<div class="row">
			<label class="col-2">PhraseID</label>
			<span class="col-2">@Edit.PhraseID</span>
		</div>

		<div class="row">
			<label class="col-2">Element</label>
			<input type="text" class="col-2" @bind="@Edit.Element" @oninput="@((e) => Edit.Element = (string)e.Value)">
		</div>

		<div class="row">
			<label class="col-2">Fras</label>
			<input type="text" class="col-2" @bind="@Edit.Phrase" @oninput="@((e) => Edit.Phrase = (string)e.Value)">
		</div>

		<div class="row">
			<label class="col-2">Orginalfras</label>
			<input type="text" class="col-2" @bind="@Edit.OrginalPhrase" @oninput="@((e) => Edit.OrginalPhrase = (string)e.Value)">
		</div>

		<div class="row">
			<label class="col-2">Beskrivning</label>
			<input type="text" class="col-2" @bind="@Edit.PhraseDescription" @oninput="@((e) => Edit.PhraseDescription = (string)e.Value)">
		</div>

		<div class="row">
			<button class="btn btn-outline-danger col-2 bi-x" @onclick=OnEditorCancelClicked>Avbryt</button>
			<button class="btn btn-outline-success col-2 bi-check" @onclick=OnEditorSaveChangesClicked>Spara ändringar</button>
		</div>
	</div>
}

@* Editor för att skapa Phrase *@
@if (IsCreating)
{
	<div>
		<h2 class="h2">Skapa en fras</h2>

		@* Labels *@
		<div class="row">
			<label class="col-4">Applikation</label>

			@if (Edit.ApplicationID != 0)
			{
				<label class="col-4">Sida</label>
			}
		</div>

		@* Application, Page, Culture *@
		<div class="row">
			@* App Selection *@
			<div class="col-4">
				<select class="form-select" disabled=@(Edit.PhraseID !=0 ? "true" : "false" ) value=@Edit.ApplicationID @onchange=OnEditApplicationChanged>
					<option selected value="">Välj en applikation..</option>
					@foreach (var app in Applications)
					{
						<option value="@app.ApplicationID">@app.ApplicationName</option>
					}
				</select>
			</div>

			@* Page Selection *@
			@if (Edit.ApplicationID != 0)
			{
				<div class="col-4">
					<select class="form-select" disabled=@(Edit.PhraseID !=0 ? "true" : "false" ) value=@Edit.PageID @onchange=OnEditPageChanged>
						<option selected value="">Välj en sida..</option>
						@foreach (var p in Pages)
						{
							<option value="@p.ID">@p.PageName</option>
						}
					</select>
				</div>
			}

			@* Culture Selection *@
			@if (Edit.PageID != 0 && Edit.ApplicationID != 0)
			{
				<div class="col-4">
					<select class="form-select" disabled=@(!String.IsNullOrEmpty(Edit.Culture) ? "true" : "false" ) value=@Edit.Culture @onchange=OnEditCultureChanged>
						<option value="">Välj en kultur..</option>
						@foreach (var c in Cultures)
						{
							<option value="@c.Culture">@c.Culture</option>
						}
					</select>
				</div>
			}

		</div>

		@* Phrase-ID/Element/Phrase *@
		<div class="row">
			<label class="col-2">Element</label>
			<input type="text" class="col-2" @bind="@Edit.Element" @oninput="@((e) => Edit.Element = (string)e.Value)">
		</div>

		<div class="row">
			<label class="col-2">Fras</label>
			<input type="text" class="col-2" @bind="@Edit.Phrase" @oninput="@((e) => Edit.Phrase = (string)e.Value)">
		</div>

		<div class="row">
			<label class="col-2">Orginalfras</label>
			<input type="text" class="col-2" @bind="@Edit.OrginalPhrase" @oninput="@((e) => Edit.OrginalPhrase = (string)e.Value)">
		</div>

		<div class="row">
			<label class="col-2">Beskrivning</label>
			<input type="text" class="col-2" @bind="@Edit.PhraseDescription" @oninput="@((e) => Edit.PhraseDescription = (string)e.Value)">
		</div>

		<div class="row">
			<button class="btn btn-outline-danger col-2 bi-x" @onclick=OnEditorCancelClicked>Avbryt</button>
			<button class="btn btn-outline-success col-2 bi-check" @onclick=OnCreateSaveClicked>Skapa fras</button>
		</div>
	</div>
}

@* Stora tabellen som visar existerande/saknade phrases *@
@if (Model.Application != 0 && Model.Page != 0 && DistinctElementPhrases.Count > 0 && !IsLoading && !IsEditing && !IsCreating)
{
	<div class="row mt-0 pt-0">
		<table class="table table-light table-striped mt-2">
			<thead class="table-light">
				<tr>
					<th>App</th>
					<th>Page</th>
					<th>Element</th>

					@foreach (var c in Cultures)
					{
						<th>@c.Culture</th>
					}

				</tr>
			</thead>

			<tbody>
				@foreach (var element in DistinctElements)
				{
					<tr>
						<td>@Applications.Where(o => o.ApplicationID == Model.Application).First().ApplicationName</td>
						<td>@Pages.Where(o => o.ID == Model.Page).First().PageName</td>
						<td>@element</td>

						@foreach (var culture in Cultures)
						{
							tmpPhrase = DistinctElementPhrases.Where(o => o.Element == element && o.Culture == culture.Culture).First();

							@if (String.IsNullOrEmpty(tmpPhrase.Phrase))
							{
								var tmpApp = tmpPhrase.ApplicationID;
								var tmpPage = (int)tmpPhrase.PageID;
								var tmpElement = tmpPhrase.Element;
								var tmpCulture = tmpPhrase.Culture;
								<td class="bi bi-x-lg text-danger" @onclick="() => CreatePhrase(tmpApp, tmpPage, tmpElement, tmpCulture)"></td>
							}

							else
							{
								var tmpid = tmpPhrase.PhraseID;
								<td class="bi bi-check-lg text-success" title="@tmpPhrase.Phrase" @onclick="() => EditPhrase(tmpid)"></td>
							}

						}
					</tr>
				}

			</tbody>
		</table>
	</div>
}

@code {
	private List<Cultures> Cultures = new();
	private List<Data.Pages> Pages = new();
	private List<Applications> Applications = new();
	private List<Phrases> Phrases = new();
	private List<Phrases> DistinctElementPhrases = new();
	private List<string> DistinctElements = new();
	private PhrasesVM Model = new();
	private EditVM Edit = new();
	private int totalCount;
	private Phrases tmpPhrase;
	bool IsLoading = false;
	bool IsEditing = false;
	bool IsCreating = false;
	string EditorMessage = String.Empty;

	// Ladda lite värden för listorna när sidan är redo
	protected override async Task OnInitializedAsync()
	{
		Cultures = await _repo.GetCulturesAsync();
		Pages = await _repo.GetPagesAsync();
		Applications = await _repo.GetApplicationsAsync();
		totalCount = await _repo.GetTotalCountAsync();
	}

	// Uppdatera Pages när en ny Application valts
	async void OnSelectedAppChanged(ChangeEventArgs e)
	{
		// Nollställ allt och rita om sidan om Application är ovald
		if (String.IsNullOrEmpty(e.Value.ToString()))
		{
			Model.Application = 0;
			Model.Page = 0;
			Model.Culture = "";
			Pages = await _repo.GetPagesAsync(Model.Application);
			totalCount = await _repo.GetTotalCountAsync();
			DistinctElementPhrases.Clear();
			StateHasChanged();
			return;
		}

		// Nollställ Page och Culture om Application byts
		if (Model.Page != 0)
			Model.Page = 0;

		if (!String.IsNullOrEmpty(Model.Culture))
			Model.Culture = "";

		// Uppdatera modellens valda app, hämta nya pages för den appen och rita om sidan
		DistinctElementPhrases.Clear();
		Model.Application = int.Parse(e.Value.ToString());
		Pages = await _repo.GetPagesAsync(Model.Application);
		totalCount = await _repo.GetTotalCountAsync(Model.Application);

		StateHasChanged();
	}

	// Uppdatera Phrases när en ny Page valts
	async void OnSelectedPageChanged(ChangeEventArgs e)
	{
		if (String.IsNullOrEmpty(e.Value.ToString()))
		{
			totalCount = await _repo.GetTotalCountAsync(Model.Application);
			Model.Page = 0;
			Model.Culture = "";
			DistinctElementPhrases.Clear();
			StateHasChanged();
			return;
		}

		Model.Page = int.Parse(e.Value.ToString());
		Phrases = await _repo.GetPhrasesAsync(Model.Application, Model.Page);
		totalCount = await _repo.GetTotalCountAsync(Model.Application, Model.Page);
		DistinctElements = await _repo.GetDistinctElementsAsync(Model.Application, Model.Page);
		DistinctElementPhrases.Clear();

		StateHasChanged();
	}

	// Uppdatera Phrases till filtrerad lista specifik till en culture när en ny Culture valts
	async void OnSelectedCultureChanged(ChangeEventArgs e)
	{
		if (String.IsNullOrEmpty(e.Value.ToString()))
		{
			Phrases = await _repo.GetPhrasesAsync(Model.Application, Model.Page);
			totalCount = await _repo.GetTotalCountAsync(Model.Application, Model.Page);
			Model.Culture = "";
			DistinctElementPhrases.Clear();
			StateHasChanged();
			return;
		}

		Model.Culture = e.Value.ToString();
		Phrases = await _repo.GetPhrasesAsync(Model.Application, Model.Page, Model.Culture);
		totalCount = await _repo.GetTotalCountAsync(Model.Application, Model.Page, Model.Culture);
		DistinctElementPhrases.Clear();

		StateHasChanged();
	}

	// Loopa igenom varje culture för varje distinkt element för att se vilka som finns/saknas
	void FindMissingTranslations()
	{
		if (Model.Application == 0 || Model.Page == 0 || Phrases.Count < 1)
		{
			return;
		}

		else
		{
			IsLoading = true;

			// Temporär delay så laddnings-meddelande visas
			//var rnd = new Random();
			//await Task.Delay(rnd.Next(500, 1500));

			// Börja med en tom lista
			DistinctElementPhrases.Clear();

			// För varje element
			foreach (var element in DistinctElements)
			{
				// Kolla om varje kultur har en översättning för det elementet
				foreach (var culture in Cultures)
				{
					// var phrase = await _repo.GetPhraseByAppPageElementCultureAsync(Model.Application, Model.Page, element, culture.Culture);
					// Kolla i redan utplockade Phrases listan istället för att hamra databasen med 300+ queries
					var phrase = GetPhrase(Model.Application, Model.Page, element, culture.Culture);

					if (phrase is not null)
					{
						DistinctElementPhrases.Add(phrase);
					}

					else
					{
						// Prova hämta svenska som mall och skriver relevanta fälten bara?
						var templatePhrase = GetPhrase(Model.Application, Model.Page, element, "sv");

						// Testar med en fallback på engelska ifall svenska saknas
						if (templatePhrase is null)
							templatePhrase = GetPhrase(Model.Application, Model.Page, element, "en");

						var missingPhrase = new Phrases
							{
								Element = element,
								Phrase = "",
								ApplicationID = Model.Application,
								PageID = Model.Page,
								Culture = culture.Culture,
								OrginalPhrase = "",
								PhraseDescription = "",
								created = DateTime.Now
							};

						if (templatePhrase is not null)
						{
							missingPhrase.Element = element;
							missingPhrase.Phrase = "";
							missingPhrase.ApplicationID = templatePhrase.ApplicationID;
							missingPhrase.PageID = templatePhrase.PageID;
							missingPhrase.Culture = culture.Culture;
							missingPhrase.OrginalPhrase = templatePhrase.OrginalPhrase;
							missingPhrase.PhraseDescription = templatePhrase.PhraseDescription;
							missingPhrase.created = DateTime.Now;
						}

						DistinctElementPhrases.Add(missingPhrase);
					}
				}
			}

			IsLoading = false;
			StateHasChanged();
		}
	}

	// Kolla i existerande phrases istället för databasen för varje rad
	Phrases? GetPhrase(int appid, int pageid, string element, string culture)
	{
		return Phrases
			.Where(phrase => phrase.ApplicationID == appid && phrase.PageID == pageid && phrase.Culture == culture && phrase.Element == element)
			.FirstOrDefault();
	}

	// Redigera existerande Phrase från editorn
	async void EditPhrase(int phraseid)
	{
		EditorMessage = "";

		var phrase = await _repo.GetPhraseById(phraseid);

		if (phrase is null)
		{
			IsEditing = false;
			EditorMessage = $"Kunde inte hitta ID {phraseid}.";
			StateHasChanged();
			return;
		}

		else
		{
			IsEditing = true;
			EditorMessage = $"Redigerar fras med ID {phraseid}.";

			Edit.created = phrase.created;
			Edit.PhraseDescription = phrase.PhraseDescription;
			Edit.Phrase = phrase.Phrase;
			Edit.PhraseID = phrase.PhraseID;
			Edit.PageID = phrase.PageID;
			Edit.ApplicationID = phrase.ApplicationID;
			Edit.Culture = phrase.Culture;
			Edit.Element = phrase.Element;
			Edit.OrginalPhrase = phrase.OrginalPhrase;

			StateHasChanged();
		}
	}

	// Skapa en ny Phrase från editorn
	void CreatePhrase(int appid, int pageid, string element, string culture)
	{
		EditorMessage = $"Skapar fras för {element}, {culture}.";
		IsCreating = true;

		Edit.created = DateTime.Now;
		Edit.ApplicationID = appid;
		Edit.PageID = pageid;
		Edit.Element = element;
		Edit.Culture = culture;
		Edit.PhraseID = 0;

		StateHasChanged();
	}

	// Nollställ tillstånd om Avbryt klickats på
	void OnEditorCancelClicked()
	{
		IsEditing = false;
		IsCreating = false;
		IsLoading = false;
		EditorMessage = "";
		StateHasChanged();
	}

	// Spara ändringar till databas
	async void OnEditorSaveChangesClicked()
	{
		if (Edit.PhraseID is null)
		{
			OnEditorCancelClicked();
			IsEditing = false;
			EditorMessage = "Hittade inte phrase med det ID";
			StateHasChanged();
			return;
		}

		var existingPhrase = await _repo.GetPhraseById((int)Edit.PhraseID);

		if (existingPhrase is not null)
		{
			var updatedPhrase = new Phrases();

			updatedPhrase.PhraseID = existingPhrase.PhraseID;
			updatedPhrase.ApplicationID = Edit.ApplicationID;
			updatedPhrase.PageID = Edit.PageID;
			updatedPhrase.Culture = Edit.Culture;
			updatedPhrase.created = existingPhrase.created;
			updatedPhrase.Phrase = Edit.Phrase;
			updatedPhrase.OrginalPhrase = Edit.OrginalPhrase;
			updatedPhrase.PhraseDescription = Edit.PhraseDescription;
			updatedPhrase.Element = Edit.Element;

			var ok = await _repo.UpdatePhraseAsync(updatedPhrase);

			if (ok)
				EditorMessage = "Sparade ändringar..";

			else
				EditorMessage = "Kunde inte spara ändringar.";

			IsEditing = false;
			StateHasChanged();
		}

	}

	async void OnCreateSaveClicked()
	{
		if (Edit.PageID == 0 || Edit.ApplicationID == 0 || String.IsNullOrEmpty(Edit.Culture))
		{
			EditorMessage = "Sida, applikation och kultur måste väljas.";
			StateHasChanged();
			return;
		}

		if (String.IsNullOrEmpty(Edit.Phrase) || String.IsNullOrEmpty(Edit.Element))
		{
			EditorMessage = "Fras och Element måste fyllas i.";
			StateHasChanged();
			return;
		}

		var createPhrase = new Phrases
			{
				created = Edit.created,
				PageID = Edit.PageID,
				ApplicationID = Edit.ApplicationID,
				Culture = Edit.Culture,
				Phrase = Edit.Phrase,
				Element = Edit.Element
			};

		if (!String.IsNullOrEmpty(Edit.OrginalPhrase))
			createPhrase.OrginalPhrase = Edit.OrginalPhrase;

		if (!String.IsNullOrEmpty(Edit.PhraseDescription))
			createPhrase.PhraseDescription = Edit.PhraseDescription;

		// Spara till databas och få tillbaka bool
		var ok = await _repo.CreatePhraseAsync(createPhrase);

		if (ok)
		{
			EditorMessage = "Ny fras sparades till databas.";

			// Uppdatera lite innehåll för tabeller
			Phrases = await _repo.GetPhrasesAsync(Model.Application, Model.Page);
			DistinctElements = await _repo.GetDistinctElementsAsync(Model.Application, Model.Page);
			DistinctElementPhrases.Clear();
			FindMissingTranslations();
		}

		else
			EditorMessage = "Kunde inte spara frasen till databas.";

		IsCreating = false;
		StateHasChanged();
	}

	void OnEditApplicationChanged(ChangeEventArgs e)
	{
		if (String.IsNullOrEmpty(e.Value.ToString()))
		{
			return;
		}

		Edit.ApplicationID = int.Parse(e.Value.ToString());

		StateHasChanged();
	}

	void OnEditPageChanged(ChangeEventArgs e)
	{
		if (String.IsNullOrEmpty(e.Value.ToString()))
		{
			return;
		}

		Edit.PageID = int.Parse(e.Value.ToString());

		StateHasChanged();
	}

	void OnEditCultureChanged(ChangeEventArgs e)
	{
		if (String.IsNullOrEmpty(e.Value.ToString()))
		{
			return;
		}

		Edit.Culture = e.Value.ToString();

		StateHasChanged();
	}
}